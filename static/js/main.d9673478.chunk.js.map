{"version":3,"sources":["components/firebase_config.js","components/PaymentCard.js","App.js","index.js"],"names":["firebase_config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","PaymentCard","props","handlePaymentForm","event","preventDefault","validateForm","postPaymentForm","state","database","cardNumber","expirationDate","expirationYear","securityCode","cardName","cardNumberError","expirationDateError","securityCodeError","cardNameError","firebase","initializeApp","this","setState","test","expirationMonth","ref","push","set","window","location","reload","className","action","name","onSubmit","id","for","placeholder","type","inputMode","maxLength","value","onChange","target","defaultValue","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9673478.chunk.js","sourcesContent":["const firebase_config = {\n    apiKey: \"AIzaSyBhYJFmtgJKRI1e8bb83E26JO9yHPJJVsM\",\n    authDomain: \"payment-card.firebaseapp.com\",\n    databaseURL: \"https://payment-card.firebaseio.com\",\n    projectId: \"payment-card\",\n    storageBucket: \"payment-card.appspot.com\",\n    messagingSenderId: \"283565729757\",\n    appId: \"1:283565729757:web:e640e36d6e4618bf993834\"\n  };\n\nexport default firebase_config","import React, { Component } from 'react'\nimport './PaymentCard.css'\n\nimport firebase from 'firebase'\nimport firebase_config from './firebase_config'\n\nclass PaymentCard extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            database: null,\n\n            cardNumber: '',\n            expirationDate: '',\n            expirationYear: '',\n            securityCode: '',\n            cardName: '',\n\n            cardNumberError: '',\n            expirationDateError: '',\n            securityCodeError: '',\n            cardNameError: '',\n        }\n    }\n\n    componentDidMount() {\n        firebase.initializeApp(firebase_config)\n        this.setState({ database: firebase.database() })\n    }\n\n    validateForm() {\n        this.setState({ cardNumberError: ''})\n        this.setState({ securityCodeError: ''})\n        this.setState({ cardNameError: ''})\n        this.setState({ expirationDateError: ''})\n\n        // Number\n        if(!this.state.cardNumber) {\n            this.setState({ cardNumberError: 'Enter the card number'})\n            return false\n        }\n\n        const cardNumberRegex = /^\\d{16}$/\n        if (!cardNumberRegex.test(this.state.cardNumber)){\n            this.setState({ cardNumberError: 'Enter full number only'})\n            return false\n        }\n            \n        // Date\n        if(!this.state.expirationMonth || this.state.expirationMonth === 'MM') {\n            this.setState({ expirationDateError: 'Enter expiration date'})\n            return false\n        }\n\n        if(!this.state.expirationYear || this.state.expirationYear === 'YY') {\n            this.setState({ expirationDateError: 'Enter expiration date'})\n            return false\n        }\n            \n        // Security Code\n        if(!this.state.securityCode) {\n            this.setState({ securityCodeError: 'Enter security code'})\n            return false\n        }\n\n        const securityCodeRegex = /^\\d{3}$/\n        if (!securityCodeRegex.test(this.state.securityCode)) {\n            this.setState({ securityCodeError: 'Enter valid CVV'})\n            return false\n        }\n\n        // Name\n        if(!this.state.cardName){\n            this.setState({ cardNameError: 'Enter the name'})\n            return false\n        }\n\n        const cardNameRegex = /^[a-zA-Z][a-zA-Z\\s]*$/\n        if (!cardNameRegex.test(this.state.cardName)){\n            this.setState({ cardNameError: 'Enter only alphabets'})\n            return false\n        }\n            \n        return true\n    }\n\n    async postPaymentForm() {\n        const database = await this.state.database\n        \n        await database.ref('list').push().set({ \n            'card-number': this.state.cardNumber, \n            'expiration-month': this.state.expirationMonth,\n            'expiration-year': this.state.expirationYear,\n            'security-code': this.state.securityCode,\n            'card-name': this.state.cardName,\n        }, () => window.location.reload())\n    }\n\n    handlePaymentForm = event => {\n        event.preventDefault()\n\n        if( this.validateForm() ){\n            this.postPaymentForm()\n        }\n    }\n\n\n    render() {\n        return ( \n        <div className=\"container\">\n\n            <form action=\"\" className=\"wrapper\" name=\"form-payment\" onSubmit={this.handlePaymentForm}>\n                \n                <h1 className=\"title\">Payment Details</h1>\n\n                <div className=\"input-container\">   \n                    \n                    <div className=\"input-field-container\" id=\"card-number\">\n                        <label for=\"card-number\">Card Number</label>\n                        <input placeholder=\"Valid Card Number\"  name=\"cardnumber\" type=\"text\" inputMode=\"numeric\" maxLength=\"16\" \n                        value={ this.state.cardNumber } onChange={ event => this.setState({ cardNumber: event.target.value }) } />\n                        <div className=\"error-message\">{ this.state.cardNumberError }</div>\n                    </div>\n                    \n                    <div className=\"input-field-container\" id=\"expiration-date\">\n                        <label for=\"expiration-date\">Expiration Date</label>\n\n                        <div>\n\n                        <select name=\"expiration-month\"\n                        value={ this.state.expirationMonth } onChange={ event => this.setState({ expirationMonth: event.target.value }) } >\n                            <option value=\"MM\"  defaultValue>MM</option>\n                            <option value=\"1\" >1</option>\n                            <option value=\"2\" >2</option>\n                            <option value=\"3\" >3</option>\n                            <option value=\"4\" >4</option>\n                            <option value=\"5\" >5</option>\n                            <option value=\"6\" >6</option>\n                            <option value=\"7\" >7</option>\n                            <option value=\"8\" >8</option>\n                            <option value=\"9\" >9</option>\n                            <option value=\"10\" >10</option>\n                            <option value=\"11\" >11</option>\n                            <option value=\"12\" >12</option>\n                        </select>\n\n                        <select name=\"expiration-year\" \n                        value={ this.state.expirationYear } onChange={ event => this.setState({ expirationYear: event.target.value }) } >\n                            <option value=\"YY\"  defaultValue>YY</option>\n                            <option value=\"2021\" >2021</option>\n                            <option value=\"2022\" >2022</option>\n                            <option value=\"2023\" >2023</option>\n                            <option value=\"2024\" >2024</option>\n                            <option value=\"2025\" >2025</option>\n                            <option value=\"2026\" >2026</option>\n                            <option value=\"2027\" >2027</option>\n                            <option value=\"2028\" >2028</option>\n                            <option value=\"2029\" >2029</option>\n                            <option value=\"2030\" >2030</option>\n                            <option value=\"2031\" >2031</option>\n                            <option value=\"2032\" >2032</option>\n                            <option value=\"2033\" >2033</option>\n                            <option value=\"2034\" >2034</option>\n                            <option value=\"2035\" >2035</option>\n                            <option value=\"2036\" >2036</option>\n                        </select>\n\n                        </div>\n                        \n                        <div className=\"error-message\">{ this.state.expirationDateError }</div>\n                    </div>\n                    \n                    <div className=\"input-field-container\" id=\"security-code\">\n                        <label for=\"security-code\">Security Code</label>\n                        <input placeholder=\"CVC\" name=\"security-code\" type=\"password\" inputMode=\"numeric\" maxLength=\"3\"\n                        value={ this.state.securityCode } onChange={ event => this.setState({ securityCode: event.target.value }) } />\n                        <div className=\"error-message\">{ this.state.securityCodeError }</div>\n                    </div>\n\n                    <div className=\"input-field-container\" id=\"card-name\">\n                        <label for=\"card-name\">Card Owner</label>\n                        <input placeholder=\"Name on card\" name=\"card-name\" type=\"text\" maxLength=\"26\"\n                        value={ this.state.cardName } onChange={ event => this.setState({ cardName: event.target.value }) } />\n                        <div className=\"error-message\">{ this.state.cardNameError }</div>\n                    </div>\n                \n                </div>\n\n                <div className=\"submit-btn\">\n                    {/* TODO type submit */}\n                    <button className=\"button-primary\">CONFIRM PAYMENT</button>\n                </div>\n                \n            </form>\n\n        </div> )\n    }\n}\n\nexport default PaymentCard","import './App.css'\nimport PaymentCard from './components/PaymentCard'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <PaymentCard />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}